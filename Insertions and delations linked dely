#include <stdio.h>

int binarySearch(int a[], int beg, int end, int val)

{

int mid;

if(end >= beg)

{

mid = (beg + end)/2;

if(a[mid] == val)

{

return mid+1;

}

/* if the item to be searched is smaller than middle, then it can only be in left subarray */

else if(a[mid] < val)

{

return binarySearch(a, mid+1, end, val);

}

/* if the item to be searched is greater than middle, then it can only be in right subarray */

else

{

return binarySearch(a, beg, mid-1, val);

}

}

return -1;

}

int main() {

int a[] = {11, 14, 25, 30, 40, 41, 52, 57, 70}; // given array

int val = 40; // value to be searched

int n = sizeof(a) / sizeof(a[0]); // size of array

int res = binarySearch(a, 0, n-1, val); // Store result

printf("The elements of the array are - ");

for (int i = 0; i < n; i++)

printf("%d ", a[i]);

printf("\nElement to be searched is - %d", val);

if (res == -1)

printf("\nElement is not present in the array");

else

printf("\nElement is present at %d position of array", res);

return 0;

}
if (h->label == k)

fou = 1;

while(h->next != NULL)

{

if (h->label == k)

{

fou=1;

break;

}

h = h->next;

}

if (h->label == k)

fou = 1;

if (fou != 1)

printf("Node not found\n");

else

{

temp=(struct node *)(malloc(sizeof(struct node)));

printf("Enter label for new node : ");

scanf("%d" , &temp->label);

temp->next = h->next;

h->next = temp;

}

break;

/* Delete any intermediate node */

case 2:

printf("Enter label of node to be deleted\n");

scanf("%d", &k);

fou = 0;

h = h1 = head;

while (h->next != NULL)

{

h = h->next;

if (h->label == k)

{

fou = 1;

break;

}

}

if (fou == 0)
printf("Sorry Node not found\n");

else

{

while (h1->next != h)

h1 = h1->next;

h1->next = h->next;

free(h);

printf("Node deleted successfully \n");

}

break;

case 3:

printf("\n\n HEAD -> ");

h=head;

while (h->next != NULL)

{

h = h->next;

printf("%d -> ",h->label);

}

printf("NULL");

break;

case 4:

exit(0);

}

}

}
